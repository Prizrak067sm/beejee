<?php
    class controller_main extends Controller
    {
        function __construct()
        {
            parent::__construct();

            $this->model = new model_main();
        }

        function action_default()
        {
            $page = $_GET['page'] ? $_GET['page'] : 1;   // Номер страницы. Если не передана в запросе, по умолчанию - 1.

            // ------------------------------------- Фильтр сортировки. ------------------------------------
            // --- Когда применяется фильтр, параметры фильтра (значения селектов) передаются в POST запросе.
            //     Поэтому, в случае наличия запроса с соответствующими элементами, относящимися к фильтру, сохраняем их в сессию.
            //     Потом на основе этих данных всегда будет сохранена выбранная сортировка. ---
            if ( !empty($_POST['select_filter_columnName']) and !empty($_POST['select_filter_vector']) )
            {
                $_SESSION['select_filter_columnName'] = $_POST['select_filter_columnName'];
                $_SESSION['select_filter_vector'] = $_POST['select_filter_vector'];
            }
            // --------------------------------------------------------------------------------

            // Если в сессии есть данные фильтра, то он когда-то применился, значит, применяем сортировку.
            if (!empty($_SESSION['select_filter_columnName']) and !empty($_SESSION['select_filter_vector']))
            {
                // --- Для удобства и читабельности кода, присваиваем переменным
                //     значения параметров фильтра, сохраненных в сесии. ---
                $column = $_SESSION['select_filter_columnName'];   // Столбец сортировки. Присваиваем просто имя пункта списка, сохраненного в сессии, будет применено в модели, а также на странице для выделеня этого пункт списка. На основе этого значения будет создано имя переменной для вьюшки.
                $vector = $_SESSION['select_filter_vector'] == 'toBig' ? model_main::VECTOR_UP : model_main::VECTOR_DOWN;   // Направление сортировки. Будет применена в модели.
                $vector_view = $_SESSION['select_filter_vector'];   // Направление сортировки. Присваиваем просто имя пункта списка, сохраненного в сессии, чтобы на странице был выделен этот пункт списка. На основе этого значения будет создано имя переменной для вьюшки.
                // ------------------------------------------------------------------------

                $this->model->set_filter($column, $vector);   // Передаем в метод модели значения фильтра. Они будут присвоены соответствующии полям-переменным, которые будут использоваться при запросе данных из БД.

                // --- Создаём переменные для вьюшки, на основе которых
                //     будут выделены соответствующие пункты списков фильтра. ---
                $this->data_for_view["selected_$column"] = 'selected';
                $this->data_for_view["selected_$vector_view"] = 'selected';
                // ---------------------------------------------------------------
            }
            else   // Если фильтр не был применен, задаем значения сортировки "по умолчанию".
            {
                $this->model->set_filter('email', model_main::VECTOR_DOWN);   // Передаем в метод модели значения фильтра - email и по убыванию. Они будут присвоены соответствующии полям-переменным, которые будут использоваться при запросе данных из БД.

                // --- Создаём переменные для вьюшки, на основе которых
                //     будут выделены пункты списков email и по убыванию. ---
                $this->data_for_view['selected_email'] = 'selected';
                $this->data_for_view['selected_toSmall'] = 'selected';
                // ----------------------------------------------------------
            }
            // ----------------- Конец фильтра сортировки. ------------------------------------------------------

            $dataModel = $this->model->get_data($page);   // Запрашиваем данные из БД - таблица с задачами.

            // --- Получаем ИДы задач, отображенных на текущей странице.
            //     Нужны для элементов выбора (radio) задачи. ---
            $all_id_task = $this->model->get_all_id();
            $all_id_task = implode(',', $all_id_task);   // Преобразуем массив ИДов в строку через запятую. Нужно будет для передачи в JS, для присваивания соответствующим элементам выбора.
            // ----------------------------------------------------------

            // --- Определяем количество страниц для пагинации. ---
            $countRow = $this->model->get_countRow();   // Количество записей в таблице с задачами.
            $countRow_print = $this->model->get_count_row_print();   // Количество записей для вывода на страницу.
            $count_page = ceil($countRow/$countRow_print);   // Количество страниц на все записи из таблицы.
            // -----------------------------------------------------

            // --- Переменные для вьюшки. ---
            $this->data_for_view['title'] = 'Главная';
            $this->data_for_view['page'] = $page;   // Текущий номер страницы.
            $this->data_for_view['count_page'] = $count_page;   // Количество страниц пагинации.
            $this->data_for_view['tasks'] = $dataModel;   // Данные таблицы с задачами.
            $this->data_for_view['all_id_task']  = $all_id_task;   // ИДы записей на текущей странице.
            $this->data_for_view['is_admin'] = $this->is_admin();   // Админ авторизован или нет. Нужно для кнопки "изменить".
            // --------------------------------

            // --- Рендерим страницу main_view, передавая шаблон, определенный в род. классе, и переменные. ---
            $this->view->generate("main_view.php", $this->template, $this->data_for_view);
            // ------------------------------------------------------------------------------------------------
        }

    }
?>